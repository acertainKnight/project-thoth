# Thoth Research Assistant Development Dockerfile
FROM python:3.11-slim

# Set environment variables for development
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEVELOPMENT=true

# Install system dependencies including development tools
RUN apt-get update && apt-get install -y \
    curl \
    git \
    build-essential \
    vim \
    htop \
    procps \
    && rm -rf /var/lib/apt/lists/*

# Install uv package manager
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.cargo/bin:$PATH"

# Create app user and directories
RUN useradd --create-home --shell /bin/bash app && \
    mkdir -p /app && \
    chown -R app:app /app

# Set working directory
WORKDIR /app

# Copy project files (dev doesn't need --frozen for flexibility)
COPY --chown=app:app pyproject.toml uv.lock* ./

# Install dependencies in development mode
RUN uv sync --dev

# Copy remaining files
COPY --chown=app:app src/ ./src/
COPY --chown=app:app templates/ ./templates/
COPY --chown=app:app tests/ ./tests/
COPY --chown=app:app docs/ ./docs/
COPY --chown=app:app README.md ./

# Create data directories
RUN mkdir -p \
    /app/data/pdfs \
    /app/knowledge \
    /app/logs \
    /app/obsidian-vault \
    /app/tmp && \
    chown -R app:app /app/data /app/knowledge /app/logs /app/obsidian-vault /app/tmp

# Switch to app user
USER app

# Install development tools
RUN uv add --dev watchdog pytest pytest-cov black isort mypy

# Health check (development version)
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose ports
EXPOSE 8000 8001

# Development command with hot reloading
CMD ["uv", "run", "python", "-m", "thoth", "api", "--host", "0.0.0.0", "--port", "8000", "--reload"]
