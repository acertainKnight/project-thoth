graph TD
    subgraph "Application Entry Point"
        subgraph "File: src/thoth/main.py"
            direction TB
            main_module_docstring["
                <b>Module Docstring</b><br/>
                Main entry point for Thoth.<br/>
                This module provides a command-line interface<br/>
                for running the Thoth system by calling<br/>
                the refactored CLI implementation.
            "]
            main_entry_execution["
                <b>Entry Point Execution</b><br/>
                if __name__ == '__main__':<br/>
                    sys.exit(main())<br/>
                <i>Delegates to CLI main function</i>
            "]

            main_module_docstring --> main_entry_execution
        end
    end

    subgraph "User Interface"
        ObsidianPlugin["Obsidian Plugin"]
    end

    subgraph "Backend Server (api_server.py)"
        direction TB
        APIServer["FastAPI Application"]

        subgraph "API Endpoints"
            direction LR
            health_check["health_check<br/>() -> JSONResponse<br/><i>Health check</i>"]
            download_pdf["download_pdf_endpoint<br/>(url: str) -> JSONResponse<br/><i>Downloads a PDF</i>"]
            view_markdown["view_markdown<br/>(path: str) -> JSONResponse<br/><i>Views markdown file</i>"]
            research_chat["research_chat<br/>(req: ChatRequest) -> ChatResponse<br/><i>Chat with agent</i>"]
            research_query["research_query<br/>(req: ResearchRequest) -> ResearchResponse<br/><i>Direct research query</i>"]
            agent_status["agent_status<br/>() -> JSONResponse<br/><i>Agent health check</i>"]
            list_agent_tools["list_agent_tools<br/>() -> JSONResponse<br/><i>Lists agent tools</i>"]
            get_agent_config["get_agent_config<br/>() -> JSONResponse<br/><i>Gets agent config</i>"]
            update_agent_config["update_agent_config<br/>(req: ConfigUpdateRequest) -> JSONResponse<br/><i>Updates agent config</i>"]
            restart_agent["restart_agent<br/>(req: AgentRestartRequest) -> JSONResponse<br/><i>Restarts agent process</i>"]
            sync_obsidian_settings["sync_obsidian_settings<br/>(settings: dict) -> JSONResponse<br/><i>Syncs Obsidian settings</i>"]
            api_server_start_server["start_server(host, port, pipeline, ...)<br/><i>Starts the FastAPI server programmatically</i>"]
        end

        APIServer --> health_check
        APIServer --> download_pdf
        APIServer --> view_markdown
        APIServer --> research_chat
        APIServer --> research_query
        APIServer --> agent_status
        APIServer --> list_agent_tools
        APIServer --> get_agent_config
        APIServer --> update_agent_config
        APIServer --> restart_agent
        APIServer --> sync_obsidian_settings
        APIServer --> api_server_start_server
    end

    subgraph "Core Orchestration (service_manager.py)"
        direction TB

        subgraph "File: src/thoth/services/service_manager.py"
            direction TB
            class_ServiceManager["
                <b>ServiceManager</b><br/>
                --<br/>
                <i>Central manager for all Thoth services.</i>
            "]

            sm_init["__init__(config)"]
            sm_initialize["initialize()<br/><i>Instantiates all services and injects dependencies.</i>"]
            sm_set_citation_tracker["set_citation_tracker(tracker)<br/><i>Injects CitationGraph into services.</i>"]

            class_ServiceManager -- "has method" --> sm_init
            class_ServiceManager -- "has method" --> sm_initialize
            class_ServiceManager -- "has method" --> sm_set_citation_tracker

            sm_initialize -- "instantiates" --> LLMService
            sm_initialize -- "instantiates & injects LLMService" --> class_ProcessingService
            sm_initialize -- "instantiates & injects LLMService" --> ArticleService
            sm_initialize -- "instantiates" --> class_NoteService
            sm_initialize -- "instantiates" --> QueryService
            sm_initialize -- "instantiates" --> DiscoveryService
            sm_initialize -- "instantiates" --> RAGService
            sm_initialize -- "instantiates" --> WebSearchService
            sm_initialize -- "instantiates" --> PDFLocatorService
            sm_initialize -- "instantiates" --> CitationService_node
            sm_initialize -- "instantiates & injects LLMService" --> TagService_node

            sm_set_citation_tracker -- "injects CitationGraph" --> TagService_node
            sm_set_citation_tracker -- "injects CitationGraph" --> CitationService_node
        end
    end

    subgraph "Services Layer"
        direction LR
        subgraph "TagService"
            TagService_node["
                <b>TagService(BaseService)</b><br/>
                (tag_service.py)
            "]
            TagService_consolidate_and_retag["consolidate_and_retag(...)"]
        end
        PDFLocatorService["PDF Locator Service"]
        subgraph "CitationService"
            CitationService_node["
                <b>CitationService(BaseService)</b><br/>
                (citation_service.py)<br/>
                --<br/>
                <b>Attributes</b><br/>
                _citation_processor: CitationProcessor | None<br/>
                _citation_formatter: CitationFormatter<br/>
                _pdf_locator_service: PdfLocatorService | None<br/>
                --<br/>
                <b>Properties</b><br/>
                citation_processor -> CitationProcessor<br/>
                pdf_locator -> PdfLocatorService<br/>
                --<br/>
                <b>Methods</b><br/>
                __init__(config, citation_processor)<br/>
                initialize() -> None<br/>
                extract_citations(path, style) -> list[Citation]<br/>
                format_citation(citation, style) -> Citation<br/>
                track_citations(pdf_path, md_path, analysis, citations) -> str | None<br/>
                get_citation_network(article_id, depth) -> dict<br/>
                search_articles(query) -> list[dict]<br/>
                get_article_data(article_id) -> dict | None<br/>
                update_article_paths(article_id, pdf_path, md_path) -> bool<br/>
                locate_pdfs_for_citations(citations, update) -> list<br/>
                locate_pdf_for_citation(citation) -> str | None
            "]

            cs_prop_citation_processor["<i>property</i> citation_processor()"]
            cs_prop_pdf_locator["<i>property</i> pdf_locator()"]
            cs_extract_citations["extract_citations(...)"]
            cs_format_citation["format_citation(...)"]
            cs_track_citations["track_citations(...)"]
            cs_get_citation_network["get_citation_network(...)"]
            cs_search_articles["search_articles(...)"]
            cs_get_article_data["get_article_data(...)"]
            cs_update_article_paths["update_article_paths(...)"]
            cs_locate_pdfs_for_citations["locate_pdfs_for_citations(...)"]
            cs_locate_pdf_for_citation["locate_pdf_for_citation(...)"]

            CitationService_node -- "has method" --> cs_prop_citation_processor
            CitationService_node -- "has method" --> cs_prop_pdf_locator
            CitationService_node -- "has method" --> cs_extract_citations
            CitationService_node -- "has method" --> cs_format_citation
            CitationService_node -- "has method" --> cs_track_citations
            CitationService_node -- "has method" --> cs_get_citation_network
            CitationService_node -- "has method" --> cs_search_articles
            CitationService_node -- "has method" --> cs_get_article_data
            CitationService_node -- "has method" --> cs_update_article_paths
            CitationService_node -- "has method" --> cs_locate_pdfs_for_citations
            CitationService_node -- "has method" --> cs_locate_pdf_for_citation
        end
        DiscoveryService["
            <b>DiscoveryService(BaseService)</b><br/>
            (discovery_service.py)<br/>
            --<br/>
            <b>Attributes</b><br/>
            sources_dir: Path<br/>
            results_dir: Path<br/>
            api_sources: dict<br/>
            web_scraper: WebScraper<br/>
            emulator_scraper: EmulatorScraper<br/>
            scheduler_running: bool<br/>
            scheduler_thread: threading.Thread | None<br/>
            schedule_file: Path<br/>
            schedule_state: dict<br/>
            article_service: ArticleService<br/>
            pdf_locator: PdfLocatorService<br/>
            --<br/>
            <b>Methods</b><br/>
            __init__(config, sources_dir, results_dir, article_service)<br/>
            initialize() -> None<br/>
            create_source(source) -> bool<br/>
            get_source(name) -> DiscoverySource | None<br/>
            list_sources(active_only) -> list[DiscoverySource]<br/>
            update_source(source) -> bool<br/>
            delete_source(name) -> bool<br/>
            run_discovery(source_name, max_articles) -> DiscoveryResult<br/>
            start_scheduler() -> None<br/>
            stop_scheduler() -> None<br/>
            get_schedule_status() -> dict<br/>
            get_statistics(days) -> dict<br/>
            --<br/>
            <b>Private Methods</b><br/>
            _discover_from_source(source, max_articles) -> list[ScrapedArticleMetadata]<br/>
            _filter_articles(articles, query_filters) -> tuple[int, int, list[str]]<br/>
            _download_pdf(metadata) -> str | None<br/>
            _save_result(result) -> None<br/>
            _scheduler_loop() -> None<br/>
            _check_and_run_scheduled_sources() -> None<br/>
            _calculate_next_run(schedule) -> str<br/>
            _load_schedule_state() -> dict<br/>
            _save_schedule_state() -> None
        "]
        ds_run_discovery["run_discovery(...)"]
        ds_discover_from_source["_discover_from_source(...)"]
        ds_filter_articles["_filter_articles(...)"]
        ds_download_pdf["_download_pdf(...)"]
        ds_start_scheduler["start_scheduler()"]
        ds_scheduler_loop["_scheduler_loop()"]
        ds_check_and_run_scheduled_sources["_check_and_run_scheduled_sources()"]

        DiscoveryService -- "has method" --> ds_run_discovery
        DiscoveryService -- "has method" --> ds_discover_from_source
        DiscoveryService -- "has method" --> ds_filter_articles
        DiscoveryService -- "has method" --> ds_download_pdf
        DiscoveryService -- "has method" --> ds_start_scheduler
        DiscoveryService -- "has method" --> ds_scheduler_loop
        DiscoveryService -- "has method" --> ds_check_and_run_scheduled_sources

        ds_run_discovery -- "calls" --> ds_discover_from_source
        ds_run_discovery -- "calls" --> ds_filter_articles
        ds_run_discovery -- "calls" --> ds_download_pdf
        ds_filter_articles -- "calls" --> as_evaluate_for_download
        ds_discover_from_source -- "uses" --> ArxivAPISource
        ds_discover_from_source -- "uses" --> PubMedAPISource
        ds_discover_from_source -- "uses" --> WebScraper
        ds_discover_from_source -- "uses" --> EmulatorScraper
        ds_start_scheduler -- "creates thread for" --> ds_scheduler_loop
        ds_scheduler_loop -- "calls" --> ds_check_and_run_scheduled_sources
        ds_check_and_run_scheduled_sources -- "calls" --> ds_run_discovery
        subgraph "RAGService"
            RAGService["
                <b>RAGService(BaseService)</b><br/>
                (rag_service.py)<br/>
                --<br/>
                <b>Properties</b><br/>
                rag_manager: RAGManager<br/>
                --<br/>
                <b>Methods</b><br/>
                __init__(config, rag_manager)<br/>
                initialize()<br/>
                index_file(file_path) -> list[str]<br/>
                index_directory(directory, ...) -> dict<br/>
                search(query, k, filter) -> list[dict]<br/>
                ask_question(question, k, filter) -> dict<br/>
                get_statistics() -> dict<br/>
                clear_index() -> None<br/>
                index_knowledge_base(markdown_dir, notes_dir) -> dict
            "]
            rs_rag_manager["<i>property</i> rag_manager()"]
            rs_index_file["index_file(...)<br/><i>Indexes a single file.</i>"]
            rs_index_directory["index_directory(...)<br/><i>Indexes a directory.</i>"]
            rs_search["search(...)<br/><i>Searches the knowledge base.</i>"]
            rs_ask_question["ask_question(...)<br/><i>Asks a question to the knowledge base.</i>"]
            rs_get_statistics["get_statistics(...)<br/><i>Gets RAG statistics.</i>"]
            rs_clear_index["clear_index(...)<br/><i>Clears the vector index.</i>"]
            rs_index_knowledge_base["index_knowledge_base(...)<br/><i>Indexes the entire knowledge base.</i>"]

            RAGService -- "has property" --> rs_rag_manager
            RAGService -- "has method" --> rs_index_file
            RAGService -- "has method" --> rs_index_directory
            RAGService -- "has method" --> rs_search
            RAGService -- "has method" --> rs_ask_question
            RAGService -- "has method" --> rs_get_statistics
            RAGService -- "has method" --> rs_clear_index
            RAGService -- "has method" --> rs_index_knowledge_base

            rs_rag_manager -- "instantiates" --> RAGManager
            rs_index_file -- "uses" --> rs_rag_manager
            rs_index_directory -- "uses" --> rs_rag_manager
            rs_search -- "uses" --> rs_rag_manager
            rs_ask_question -- "uses" --> rs_rag_manager
            rs_get_statistics -- "uses" --> rs_rag_manager
            rs_clear_index -- "uses" --> rs_rag_manager
            rs_index_knowledge_base -- "calls" --> rs_index_directory
            rs_index_knowledge_base -- "calls" --> rs_get_statistics
        end
        LLMRouter["LLM Router"]
        QueryService["
            <b>QueryService(BaseService)</b><br/>
            (query_service.py)<br/>
            --<br/>
            <b>Attributes</b><br/>
            storage_dir: Path<br/>
            _llm: OpenRouterClient | None<br/>
            _queries: dict[str, ResearchQuery]<br/>
            prompts_dir: Path<br/>
            jinja_envs: dict<br/>
            --<br/>
            <b>Properties</b><br/>
            llm -> OpenRouterClient<br/>
            --<br/>
            <b>Methods</b><br/>
            __init__(config, storage_dir)<br/>
            initialize() -> None<br/>
            create_query(query) -> bool<br/>
            get_query(name) -> ResearchQuery | None<br/>
            list_queries() -> list[str]<br/>
            delete_query(name) -> bool<br/>
            evaluate_article(title, abstract, query_name, content) -> QueryEvaluationResponse | None<br/>
            get_all_queries() -> list[ResearchQuery]<br/>
            update_query(name, updates) -> bool<br/>
            _build_evaluation_prompt(title, abstract, query, content) -> str
        "]
        qs_create_query["create_query(...)"]
        qs_get_query["get_query(...)"]
        qs_list_queries["list_queries()"]
        qs_delete_query["delete_query(...)"]
        qs_evaluate_article["evaluate_article(...)"]
        qs_get_all_queries["get_all_queries()"]
        qs_update_query["update_query(...)"]
        qs_build_evaluation_prompt["_build_evaluation_prompt(...)"]

        QueryService -- "has method" --> qs_create_query
        QueryService -- "has method" --> qs_get_query
        QueryService -- "has method" --> qs_list_queries
        QueryService -- "has method" --> qs_delete_query
        QueryService -- "has method" --> qs_evaluate_article
        QueryService -- "has method" --> qs_get_all_queries
        QueryService -- "has method" --> qs_update_query
        QueryService -- "has method" --> qs_build_evaluation_prompt

        qs_evaluate_article -- "calls" --> qs_get_query
        qs_evaluate_article -- "calls" --> qs_build_evaluation_prompt
        qs_get_all_queries -- "calls" --> qs_list_queries
        qs_get_all_queries -- "calls" --> qs_get_query
        qs_update_query -- "calls" --> qs_get_query
        qs_update_query -- "calls" --> qs_create_query
        ArticleService["
            <b>ArticleService(BaseService)</b><br/>
            (article_service.py)<br/>
            --<br/>
            <b>Attributes</b><br/>
            _llm_service: LLMService | None<br/>
            query_service: None<br/>
            prompts_dir: Path<br/>
            jinja_envs: dict<br/>
            --<br/>
            <b>Properties</b><br/>
            llm_service -> LLMService<br/>
            --<br/>
            <b>Methods</b><br/>
            __init__(config, llm_service)<br/>
            initialize() -> None<br/>
            evaluate_against_query(article, query) -> QueryEvaluationResponse<br/>
            evaluate_for_download(metadata, queries) -> PreDownloadEvaluationResponse<br/>
            check_relevance(title, abstract, query) -> float<br/>
            _build_evaluation_prompt(article, query) -> str<br/>
            _aggregate_topic_analysis(evaluations) -> str<br/>
            _calculate_confidence(evaluations) -> float
        "]
        as_evaluate_against_query["evaluate_against_query(...)"]
        as_evaluate_for_download["evaluate_for_download(...)"]
        as_check_relevance["check_relevance(...)"]
        as_build_evaluation_prompt["_build_evaluation_prompt(...)"]
        as_aggregate_topic_analysis["_aggregate_topic_analysis(...)"]
        as_calculate_confidence["_calculate_confidence(...)"]

        ArticleService -- "has method" --> as_evaluate_against_query
        ArticleService -- "has method" --> as_evaluate_for_download
        ArticleService -- "has method" --> as_check_relevance
        ArticleService -- "has method" --> as_build_evaluation_prompt
        ArticleService -- "has method" --> as_aggregate_topic_analysis
        ArticleService -- "has method" --> as_calculate_confidence

        as_evaluate_for_download -- "calls" --> as_aggregate_topic_analysis
        as_evaluate_for_download -- "calls" --> as_calculate_confidence
        as_evaluate_against_query -- "calls" --> as_build_evaluation_prompt
        ArticleService -- "uses" --> LLMService
        ArticleService -- "uses" --> QueryService
        qs_evaluate_article -- "uses" --> OpenRouterClient
        QueryService -- "uses" --> Jinja2Environment
        QueryService -- "manages" --> ResearchQuery
        QueryService -- "produces" --> QueryEvaluationResponse
        QueryService -- "stores to" --> JSONFiles
        ArticleService -- "uses" --> Jinja2Environment
        ArticleService -- "produces" --> QueryEvaluationResponse
        ArticleService -- "produces" --> PreDownloadEvaluationResponse
        ArticleService -- "uses" --> AnalysisResponse
        ArticleService -- "uses" --> ScrapedArticleMetadata
        ArticleService -- "uses" --> ResearchQuery
        ProcessingService -- "uses" --> LLMService
        ProcessingService -- "uses" --> LLMProcessor
        ProcessingService -..-> MistralAPI
        ProcessingService -- "uses" --> Mistral
        ProcessingService -- "uses" --> PdfReader
        ProcessingService -- "produces" --> AnalysisResponse
        TagService -- "uses" --> LLMService
        RAGManager -- "uses" --> EmbeddingManager
        RAGManager -- "uses" --> VectorStoreManager
        VectorStoreManager -- "uses" --> KnowledgeBase
        DiscoveryService -- "uses" --> ArticleService
        DiscoveryService -- "uses" --> ArxivAPISource
        DiscoveryService -- "uses" --> WebScraper
        DiscoveryService -- "uses" --> PubMedAPISource
        DiscoveryService -- "uses" --> EmulatorScraper
        DiscoveryService -- "uses" --> PdfLocatorService
        DiscoveryService -- "manages" --> DiscoverySource
        DiscoveryService -- "produces" --> DiscoveryResult
        DiscoveryService -- "manages" --> ScheduleConfig
        DiscoveryService -- "uses" --> threading
        CitationService -- "uses" --> CitationProcessor
        CitationProcessor -- "uses" --> ReferenceExtractor
        CitationProcessor -- "uses" --> CitationEnhancer
        cs_prop_citation_processor -- "instantiates and uses" --> CitationProcessor
        cs_prop_citation_processor -- "instantiates" --> LLMService
        cs_extract_citations -- "calls" --> cs_prop_citation_processor
        cs_prop_pdf_locator -- "instantiates and calls initialize" --> PDFLocatorService
        cs_locate_pdfs_for_citations -- "calls" --> cs_prop_pdf_locator
        cs_locate_pdf_for_citation -- "calls" --> cs_prop_pdf_locator
        cs_track_citations -- "uses" --> CitationGraph
        cs_get_citation_network -- "uses" --> CitationGraph
        cs_search_articles -- "uses" --> CitationGraph
        cs_get_article_data -- "uses" --> CitationGraph
        cs_update_article_paths -- "uses" --> CitationGraph
        CitationEnhancer -- "uses" --> ExternalAPIs
        LLMService -..-> ExternalLLMAPIs
        LLMService -- "instantiates" --> OpenRouterClient
        LLMService -- "instantiates" --> AnthropicClient
        LLMService -- "instantiates" --> OpenAIClient
        LLMService -- "uses" --> OpenRouterClient
        LLMService -- "uses" --> AnthropicClient
        LLMService -- "uses" --> OpenAIClient
        LLMService -- "uses" --> ChatPromptTemplate
        DiscoveryService -- "Uses" --> WebSearchService
        DiscoveryService -- "Accesses" --> ExternalAPIs
        class_NoteService -- "Manages" --> LocalFiles
        class_NoteService -- "uses" --> Jinja2Environment
        class_NoteService -- "uses" --> AnalysisResponse
        class_NoteService -- "uses" --> Citation
        class_NoteService -- "creates" --> ObsidianNotes
        class_NoteService -- "manages" --> TemplateSystem
        class_NoteService -- "handles" --> FileSystemOps
        PDFLocatorService -- "Manages" --> LocalFiles

        %% Config Usage
        APIServer -- "uses" --> ThothConfig
        class_ServiceManager -- "uses" --> ThothConfig
        Agent -- "uses" --> ThothConfig

        %% Data Flow
        Agent -- "Updates" --> KnowledgeBase
        Agent -- "Generates" --> LocalFiles
        Mistral -- "connects to" --> MistralAPI

        %% Service Inheritance from BaseService
        TagService -- "inherits from" --> BaseService
        PDFLocatorService -- "inherits from" --> BaseService
        CitationService -- "inherits from" --> BaseService
        DiscoveryService -- "inherits from" --> BaseService
        class_NoteService -- "inherits from" --> BaseService
        QueryService -- "inherits from" --> BaseService
        ArticleService -- "inherits from" --> BaseService
        LLMService -- "inherits from" --> BaseService
        class_ProcessingService -- "inherits from" --> BaseService
        WebSearchService -- "inherits from" --> BaseService
        RAGService -- "inherits from" --> BaseService
    end

    subgraph "Agentic System (LangGraph)"
        direction TB
        Agent["
            <b>ResearchAssistant</b><br/>
            (agent.py)<br/>
            --<br/>
            <b>Attributes</b><br/>
            service_manager: ServiceManager<br/>
            tools: list[BaseTool]<br/>
            app: StateGraph<br/>
            --<br/>
            <b>Methods</b><br/>
            _build_graph()<br/>
            _register_tools()<br/>
            chat(message)
        "]

        AgentState["
            <b>ResearchAgentState</b><br/>
            (state.py)<br/>
            --<br/>
            <b>Attributes</b><br/>
            messages: list<br/>
            current_task: str<br/>
            session_id: str
        "]

        LangGraphLib["LangGraph Library"]

        subgraph "Agent Tools"
            direction LR
            PDFTools["PDF Tools"]
            DiscoveryTools["Discovery Tools"]
            RAGTools["RAG Tools"]
            WebTools["Web Tools"]
            AnalysisTools["Analysis Tools"]
            QueryTools["Query Tools"]
        end
    end

    subgraph "Data & External APIs"
        KnowledgeBase["Knowledge Base (Vector DB)"]
        ExternalAPIs["External APIs (ArXiv, PubMed, etc.)"]
        ExternalLLMAPIs["External LLM APIs<br/>(OpenAI, Anthropic, OpenRouter)"]
        MistralAPI["Mistral API (OCR)"]
        LocalFiles["Local Files (PDFs, Notes)"]
        Mistral["Mistral Client"]
        PdfReader["PyPDF Reader"]
        AnalysisResponse["AnalysisResponse Schema"]
        QueryEvaluationResponse["QueryEvaluationResponse Schema"]
        PreDownloadEvaluationResponse["PreDownloadEvaluationResponse Schema"]
        ScrapedArticleMetadata["ScrapedArticleMetadata Schema"]
        ResearchQuery["ResearchQuery Schema"]
        Jinja2Environment["Jinja2 Template Environment"]
        JSONFiles["JSON Storage Files"]
        OpenRouterClient["OpenRouterClient<br/>(utilities/openrouter_client.py)"]
        AnthropicClient["AnthropicClient<br/>(utilities/anthropic_client.py)"]
        OpenAIClient["OpenAIClient<br/>(utilities/openai_client.py)"]
        VectorStore["Vector Store Database"]
        MarkdownFiles["Markdown Document Files"]
        SearchResults["Search Result Objects"]
        QuestionAnswering["Q&A Response Objects"]
        PubMedAPISource["PubMed API Source"]
        EmulatorScraper["Browser Emulator Scraper"]
        DiscoverySource["Discovery Source Schema"]
        DiscoveryResult["Discovery Result Schema"]
        ScheduleConfig["Schedule Configuration Schema"]
        threading["Threading Module"]
        Citation["Citation Schema"]
        ObsidianNotes["Obsidian Note Files"]
        TemplateSystem["Jinja2 Template System"]
        FileSystemOps["File System Operations"]
    end

    subgraph "Configuration (config.py)"
        direction TB
        ThothConfig["
            <b>ThothConfig</b><br/>
            (Root Settings Class)<br/>
            --<br/>
            <b>Composes</b><br/>
            api_keys: APIKeys<br/>
            llm_config: LLMConfig<br/>
            discovery_config: DiscoveryConfig<br/>
            rag_config: RAGConfig<br/>
            ...and other configs
        "]

        subgraph "Setting Sources"
            direction LR
            EnvFile[".env File"]
            PyProject["pyproject.toml"]
        end

        subgraph "Component Configs"
            direction LR
            APIKeys["APIKeys"]
            LLMConfig["LLMConfig"]
            DiscoveryConfig["DiscoveryConfig"]
            RAGConfig["RAGConfig"]
        end

        ThothConfig -- "composes" --> APIKeys
        ThothConfig -- "composes" --> LLMConfig
        ThothConfig -- "composes" --> DiscoveryConfig
        ThothConfig -- "composes" --> RAGConfig

        ThothConfig -.-> EnvFile
        ThothConfig -.-> PyProject
    end

    subgraph "Core Pipeline (pipeline.py)"
        direction TB

        subgraph "File: src/thoth/pipeline.py"
            direction TB
            PipelineError["PipelineError(Exception)<br/><i>Exception for errors in the pipeline</i>"]

            class_ThothPipeline["
                <b>ThothPipeline</b><br/>
                --<br/>
                <i>Orchestrates the document processing workflow.</i>
            "]

            pipeline_init["__init__(...)<br/><i>Initializes the pipeline and services.</i>"]
            pipeline_process_pdf["process_pdf(pdf_path: Path) -> Path<br/><i>Processes a single PDF from path to note.</i>"]
            pipeline_ocr_convert["_ocr_convert(pdf_path: Path) -> tuple[Path, Path]<br/><i>Converts PDF to Markdown via OCR.</i>"]
            pipeline_analyze_content["_analyze_content(md_path: Path)<br/><i>Analyzes content using an LLM.</i>"]
            pipeline_extract_citations["_extract_citations(md_path: Path) -> list<br/><i>Extracts citations from content.</i>"]
            pipeline_generate_note["_generate_note(...) -> tuple<br/><i>Generates the final Obsidian note.</i>"]
            pipeline_index_to_rag["_index_to_rag(file_path: Path)<br/><i>Indexes a file into the RAG system.</i>"]
            pipeline_consolidate_tags["consolidate_and_retag_all_articles()<br/><i>Consolidates and adds new tags to all articles.</i>"]
            pipeline_index_kb["index_knowledge_base()<br/><i>Indexes all markdown files in the knowledge base.</i>"]
            pipeline_search_kb["search_knowledge_base(query: str) -> list<br/><i>Searches the knowledge base.</i>"]
            pipeline_ask_kb["ask_knowledge_base(question: str) -> dict<br/><i>Asks a question to the knowledge base.</i>"]
            pipeline_web_search["web_search(query: str) -> list<br/><i>Performs a web search.</i>"]
            pipeline_clear_rag["clear_rag_index()<br/><i>Clears the RAG vector index.</i>"]
            pipeline_get_rag_stats["get_rag_stats()<br/><i>Gets statistics about the RAG system.</i>"]

            class_ThothPipeline -- "has method" --> pipeline_init
            class_ThothPipeline -- "has method" --> pipeline_process_pdf
            class_ThothPipeline -- "has method" --> pipeline_ocr_convert
            class_ThothPipeline -- "has method" --> pipeline_analyze_content
            class_ThothPipeline -- "has method" --> pipeline_extract_citations
            class_ThothPipeline -- "has method" --> pipeline_generate_note
            class_ThothPipeline -- "has method" --> pipeline_index_to_rag
            class_ThothPipeline -- "has method" --> pipeline_consolidate_tags
            class_ThothPipeline -- "has method" --> pipeline_index_kb
            class_ThothPipeline -- "has method" --> pipeline_search_kb
            class_ThothPipeline -- "has method" --> pipeline_ask_kb
            class_ThothPipeline -- "has method" --> pipeline_web_search
            class_ThothPipeline -- "has method" --> pipeline_clear_rag
            class_ThothPipeline -- "has method" --> pipeline_get_rag_stats

            pipeline_init -- "instantiates" --> class_ServiceManager
            pipeline_init -- "calls" --> sm_initialize
            pipeline_init -- "calls" --> sm_set_citation_tracker
            pipeline_init -- "instantiates" --> PDFTracker["PDFTracker"]
            pipeline_init -- "instantiates" --> CitationGraph["CitationGraph"]

            pipeline_process_pdf -- "calls" --> pipeline_ocr_convert
            pipeline_process_pdf -- "calls" --> pipeline_analyze_content
            pipeline_process_pdf -- "calls" --> pipeline_extract_citations
            pipeline_process_pdf -- "calls" --> pipeline_generate_note
            pipeline_process_pdf -- "calls" --> pipeline_index_to_rag

            pipeline_ocr_convert -- "delegates to" --> ps_ocr_convert
            pipeline_analyze_content -- "delegates to" --> ps_analyze_document
            pipeline_extract_citations -- "delegates to" --> cs_extract_citations
            pipeline_generate_note -- "delegates to" --> ns_create_note
            pipeline_generate_note -- "uses" --> CitationGraph

            pipeline_index_to_rag -- "delegates to" --> rs_index_file
            pipeline_consolidate_tags -- "delegates to" --> TagService_consolidate_and_retag
            pipeline_index_kb -- "delegates to" --> rs_index_knowledge_base
            pipeline_search_kb -- "delegates to" --> rs_search
            pipeline_ask_kb -- "delegates to" --> rs_ask_question
            pipeline_web_search -- "delegates to" --> WebSearchService
            pipeline_clear_rag -- "delegates to" --> rs_clear_index
            pipeline_get_rag_stats -- "delegates to" --> rs_get_statistics

            class_ThothPipeline -- "raises" --> PipelineError
        end
    end

    subgraph "CLI (Command-Line Interface)"
        direction TB

        subgraph "File: src/thoth/cli/main.py"
            direction TB
            main_cli_main_func["
                <b>main() -> None</b><br/>
                <i>Main entry point for the Thoth CLI.</i>
            "]

            main_cli_main_func_dispatch["args.func(args, pipeline)<br/><i>Dynamically dispatches to command function</i>"]

            main_cli_main_func -- "instantiates" --> class_ThothPipeline
            main_cli_main_func -- "calls" --> agent_cli_configure_subparser
            main_cli_main_func -- "calls" --> discovery_cli_configure_subparser
            main_cli_main_func -- "calls" --> notes_cli_configure_subparser
            main_cli_main_func -- "calls" --> pdf_cli_configure_subparser
            main_cli_main_func -- "calls" --> rag_cli_configure_subparser
            main_cli_main_func -- "calls" --> system_cli_configure_subparser
            main_cli_main_func --> main_cli_main_func_dispatch
        end

        subgraph "File: src/thoth/cli/system.py"
            direction TB
            system_cli_configure_subparser["configure_subparser(subparsers)<br/><i>Configure the subparser for system commands</i>"]
            system_cli_run_monitor["run_monitor(args, pipeline: ThothPipeline)<br/><i>Run the PDF monitor</i>"]
            system_cli_process_pdf["process_pdf(args, pipeline: ThothPipeline)<br/><i>Process a single PDF file</i>"]
            system_cli_run_api_server["run_api_server(args, pipeline: ThothPipeline)<br/><i>Run the Obsidian API server</i>"]
            system_cli_run_scrape_filter_test["run_scrape_filter_test(args, pipeline: ThothPipeline)<br/><i>Test the filter with sample articles</i>"]

            system_cli_configure_subparser -- "registers" --> system_cli_run_monitor
            system_cli_configure_subparser -- "registers" --> system_cli_process_pdf
            system_cli_configure_subparser -- "registers" --> system_cli_run_api_server
            system_cli_configure_subparser -- "registers" --> system_cli_run_scrape_filter_test

            system_cli_run_monitor -- "uses" --> PDFMonitor
            system_cli_run_monitor -- "calls" --> api_server_start_server
            system_cli_process_pdf -- "calls" --> pipeline_process_pdf
            system_cli_run_api_server -- "calls" --> api_server_start_server
            system_cli_run_scrape_filter_test -- "uses" --> QueryService
        end

        subgraph "Other Subcommands"
            direction TB
            subgraph "File: src/thoth/cli/agent.py"
                agent_cli_configure_subparser["configure_subparser(subparsers)"]
            end
            subgraph "File: src/thoth/cli/discovery.py"
                discovery_cli_configure_subparser["configure_subparser(subparsers)"]
            end
            subgraph "File: src/thoth/cli/notes.py"
                notes_cli_configure_subparser["configure_subparser(subparsers)"]
            end
            subgraph "File: src/thoth/cli/pdf.py"
                pdf_cli_configure_subparser["configure_subparser(subparsers)"]
            end
            subgraph "File: src/thoth/cli/rag.py"
                rag_cli_configure_subparser["configure_subparser(subparsers)"]
            end
        end

        main_entry_execution -- "calls sys.exit(main())" --> main_cli_main_func

        main_cli_main_func_dispatch -- "executes command" --> system_cli_run_monitor
        main_cli_main_func_dispatch -- "executes command" --> pipeline_process_pdf
        main_cli_main_func_dispatch -- "executes command" --> system_cli_run_api_server
        main_cli_main_func_dispatch -- "executes command" --> system_cli_run_scrape_filter_test
    end

    %% --- Relationships ---

    %% UI to Backend
    ObsidianPlugin -- "HTTP Requests" --> APIServer

    %% API to Services
    APIServer -- "Uses" --> class_ServiceManager
    APIServer -- "Initializes" --> Agent

    sm_llm_prop -- "provides access to" --> LLMService
    sm_processing_prop -- "provides access to" --> class_ProcessingService
    sm_article_prop -- "provides access to" --> ArticleService
    sm_note_prop -- "provides access to" --> class_NoteService
    sm_query_prop -- "provides access to" --> QueryService
    sm_discovery_prop -- "provides access to" --> DiscoveryService
    sm_rag_prop -- "provides access to" --> RAGService
    sm_web_search_prop -- "provides access to" --> WebSearchService
    sm_citation_prop -- "provides access to" --> CitationService
    sm_tag_prop -- "provides access to" --> TagService
    sm_pdf_locator_prop -- "provides access to" --> PDFLocatorService
    PDFMonitor -- "uses" --> class_ThothPipeline

    %% Services to Agent
    class_ProcessingService -- "Invokes" --> Agent

    %% Agent Core
    Agent -- "uses" --> LangGraphLib
    Agent -- "registers" --> PDFTools
    Agent -- "registers" --> DiscoveryTools
    Agent -- "registers" --> RAGTools
    Agent -- "registers" --> WebTools
    Agent -- "registers" --> AnalysisTools
    Agent -- "registers" --> QueryTools
    Agent -- "compiles with" --> AgentState
    LangGraphLib -- "uses schema" --> AgentState

    %% Services Dependencies
    LLMRouter --> LLMService
    ArticleService -- "uses" --> LLMService
    ArticleService -- "uses" --> QueryService
    QueryService -- "uses" --> OpenRouterClient
    QueryService -- "uses" --> Jinja2Environment
    QueryService -- "manages" --> ResearchQuery
    QueryService -- "produces" --> QueryEvaluationResponse
    QueryService -- "stores to" --> JSONFiles
    ArticleService -- "uses" --> Jinja2Environment
    ArticleService -- "produces" --> QueryEvaluationResponse
    ArticleService -- "produces" --> PreDownloadEvaluationResponse
    ArticleService -- "uses" --> AnalysisResponse
    ArticleService -- "uses" --> ScrapedArticleMetadata
    ArticleService -- "uses" --> ResearchQuery
    ProcessingService -- "uses" --> LLMService
    ProcessingService -- "uses" --> LLMProcessor
    ProcessingService -..-> MistralAPI
    ProcessingService -- "uses" --> Mistral
    ProcessingService -- "uses" --> PdfReader
    ProcessingService -- "produces" --> AnalysisResponse
    TagService -- "uses" --> LLMService
    RAGService -- "uses" --> RAGManager
    RAGService -- "manages" --> VectorStore
    RAGService -- "indexes" --> MarkdownFiles
    RAGService -- "produces" --> SearchResults
    RAGService -- "provides" --> QuestionAnswering
    RAGManager -- "uses" --> EmbeddingManager
    RAGManager -- "uses" --> VectorStoreManager
    VectorStoreManager -- "uses" --> KnowledgeBase
    DiscoveryService -- "uses" --> ArticleService
    DiscoveryService -- "uses" --> ArxivAPISource
    DiscoveryService -- "uses" --> WebScraper
    DiscoveryService -- "uses" --> PubMedAPISource
    DiscoveryService -- "uses" --> EmulatorScraper
    DiscoveryService -- "uses" --> PdfLocatorService
    DiscoveryService -- "manages" --> DiscoverySource
    DiscoveryService -- "produces" --> DiscoveryResult
    DiscoveryService -- "manages" --> ScheduleConfig
    DiscoveryService -- "uses" --> threading
    CitationService -- "uses" --> CitationProcessor
    CitationProcessor -- "uses" --> ReferenceExtractor
    CitationProcessor -- "uses" --> CitationEnhancer
    cs_prop_citation_processor -- "instantiates and uses" --> CitationProcessor
    cs_prop_citation_processor -- "instantiates" --> LLMService
    cs_extract_citations -- "calls" --> cs_prop_citation_processor
    cs_prop_pdf_locator -- "instantiates and calls initialize" --> PDFLocatorService
    cs_locate_pdfs_for_citations -- "calls" --> cs_prop_pdf_locator
    cs_locate_pdf_for_citation -- "calls" --> cs_prop_pdf_locator
    cs_track_citations -- "uses" --> CitationGraph
    cs_get_citation_network -- "uses" --> CitationGraph
    cs_search_articles -- "uses" --> CitationGraph
    cs_get_article_data -- "uses" --> CitationGraph
    cs_update_article_paths -- "uses" --> CitationGraph
    CitationEnhancer -- "uses" --> ExternalAPIs
    LLMService -..-> ExternalLLMAPIs
    LLMService -- "instantiates" --> OpenRouterClient
    LLMService -- "instantiates" --> AnthropicClient
    LLMService -- "instantiates" --> OpenAIClient
    LLMService -- "uses" --> OpenRouterClient
    LLMService -- "uses" --> AnthropicClient
    LLMService -- "uses" --> OpenAIClient
    LLMService -- "uses" --> ChatPromptTemplate
    DiscoveryService -- "Uses" --> WebSearchService
    DiscoveryService -- "Accesses" --> ExternalAPIs
    class_NoteService -- "Manages" --> LocalFiles
    class_NoteService -- "uses" --> Jinja2Environment
    class_NoteService -- "uses" --> AnalysisResponse
    class_NoteService -- "uses" --> Citation
    class_NoteService -- "creates" --> ObsidianNotes
    class_NoteService -- "manages" --> TemplateSystem
    class_NoteService -- "handles" --> FileSystemOps
    PDFLocatorService -- "Manages" --> LocalFiles

    %% Config Usage
    APIServer -- "uses" --> ThothConfig
    class_ServiceManager -- "uses" --> ThothConfig
    Agent -- "uses" --> ThothConfig

    %% Data Flow
    Agent -- "Updates" --> KnowledgeBase
    Agent -- "Generates" --> LocalFiles
    Mistral -- "connects to" --> MistralAPI

    %% Service Inheritance from BaseService
    TagService -- "inherits from" --> BaseService
    PDFLocatorService -- "inherits from" --> BaseService
    CitationService -- "inherits from" --> BaseService
    DiscoveryService -- "inherits from" --> BaseService
    class_NoteService -- "inherits from" --> BaseService
    QueryService -- "inherits from" --> BaseService
    ArticleService -- "inherits from" --> BaseService
    LLMService -- "inherits from" --> BaseService
    class_ProcessingService -- "inherits from" --> BaseService
    WebSearchService -- "inherits from" --> BaseService
    RAGService -- "inherits from" --> BaseService

    %% New RAGService subgraph
    subgraph "RAGService"
        RAGService["
            <b>RAGService(BaseService)</b><br/>
            (rag_service.py)<br/>
            --<br/>
            <b>Properties</b><br/>
            rag_manager: RAGManager<br/>
            --<br/>
            <b>Methods</b><br/>
            __init__(config, rag_manager)<br/>
            initialize()<br/>
            index_file(file_path) -> list[str]<br/>
            index_directory(directory, ...) -> dict<br/>
            search(query, k, filter) -> list[dict]<br/>
            ask_question(question, k, filter) -> dict<br/>
            get_statistics() -> dict<br/>
            clear_index() -> None<br/>
            index_knowledge_base(markdown_dir, notes_dir) -> dict
        "]
        rs_rag_manager["<i>property</i> rag_manager()"]
        rs_index_file["index_file(...)<br/><i>Indexes a single file.</i>"]
        rs_index_directory["index_directory(...)<br/><i>Indexes a directory.</i>"]
        rs_search["search(...)<br/><i>Searches the knowledge base.</i>"]
        rs_ask_question["ask_question(...)<br/><i>Asks a question to the knowledge base.</i>"]
        rs_get_statistics["get_statistics(...)<br/><i>Gets RAG statistics.</i>"]
        rs_clear_index["clear_index(...)<br/><i>Clears the vector index.</i>"]
        rs_index_knowledge_base["index_knowledge_base(...)<br/><i>Indexes the entire knowledge base.</i>"]

        RAGService -- "has property" --> rs_rag_manager
        RAGService -- "has method" --> rs_index_file
        RAGService -- "has method" --> rs_index_directory
        RAGService -- "has method" --> rs_search
        RAGService -- "has method" --> rs_ask_question
        RAGService -- "has method" --> rs_get_statistics
        RAGService -- "has method" --> rs_clear_index
        RAGService -- "has method" --> rs_index_knowledge_base

        rs_rag_manager -- "instantiates" --> RAGManager
        rs_index_file -- "uses" --> rs_rag_manager
        rs_index_directory -- "uses" --> rs_rag_manager
        rs_search -- "uses" --> rs_rag_manager
        rs_ask_question -- "uses" --> rs_rag_manager
        rs_get_statistics -- "uses" --> rs_rag_manager
        rs_clear_index -- "uses" --> rs_rag_manager
        rs_index_knowledge_base -- "calls" --> rs_index_directory
        rs_index_knowledge_base -- "calls" --> rs_get_statistics
    end

    subgraph "WebSearchService"
        WebSearchService["WebSearchService"]
    end
