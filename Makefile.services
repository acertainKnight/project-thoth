# ==============================================================================
# Thoth Multi-Service Management Makefile
# Manage all Thoth services independently with separate scaling
# ==============================================================================

.PHONY: help
help: ## Show available commands for multi-service management
	@echo "üöÄ Thoth Multi-Service Management"
	@echo "=================================="
	@echo ""
	@echo "üèóÔ∏è  Service Management:"
	@echo "  start-all          - Start all services (development)"
	@echo "  start-all-prod     - Start all services (production)"
	@echo "  stop-all           - Stop all services"
	@echo "  restart-all        - Restart all services"
	@echo "  status-all         - Show status of all services"
	@echo ""
	@echo "üéØ Individual Services:"
	@echo "  start-memory       - Start memory service (Letta)"
	@echo "  start-chat         - Start chat agent service"
	@echo "  start-discovery    - Start discovery service"
	@echo "  start-monitoring   - Start monitoring stack"
	@echo "  start-vector-db    - Start vector database (ChromaDB)"
	@echo ""
	@echo "‚öôÔ∏è  Service Operations:"
	@echo "  scale-memory       - Scale memory service replicas"
	@echo "  scale-chat         - Scale chat service replicas"
	@echo "  logs-memory        - View memory service logs"
	@echo "  logs-chat          - View chat service logs"
	@echo "  logs-discovery     - View discovery service logs"
	@echo ""
	@echo "üîß Maintenance:"
	@echo "  backup-memory      - Backup memory service data"
	@echo "  backup-vector      - Backup vector database"
	@echo "  health-check       - Check health of all services"
	@echo "  clean-all          - Clean all services and volumes"
	@echo ""
	@echo "üìä Monitoring:"
	@echo "  open-grafana       - Open Grafana dashboard"
	@echo "  open-prometheus    - Open Prometheus metrics"
	@echo "  view-metrics       - View service metrics summary"

# ==============================================================================
# Service Management Commands
# ==============================================================================

start-all: ## Start all services in development mode
	@echo "üöÄ Starting all Thoth services (development)..."
	@./scripts/start-all-services.sh dev

start-all-prod: ## Start all services in production mode
	@echo "üöÄ Starting all Thoth services (production)..."
	@./scripts/start-all-services.sh prod

stop-all: ## Stop all services
	@echo "üõë Stopping all Thoth services..."
	@./scripts/stop-all-services.sh

restart-all: ## Restart all services
	@echo "üîÑ Restarting all Thoth services..."
	@./scripts/stop-all-services.sh
	@sleep 5
	@./scripts/start-all-services.sh dev

status-all: ## Show status of all services
	@./scripts/start-all-services.sh status

# ==============================================================================
# Individual Service Commands
# ==============================================================================

start-memory: ## Start memory service (Letta) only
	@echo "üß† Starting memory service..."
	@cd deployment/letta-memory-service && make start
	@echo "Memory service available at: http://localhost:8283"

start-chat: ## Start chat agent service only
	@echo "üí¨ Starting chat agent service..."
	@docker-compose -f deployment/docker-compose.services.yml up -d thoth-chat chromadb
	@echo "Chat service available at: http://localhost:8000"
	@echo "MCP server available at: http://localhost:8001"

start-discovery: ## Start discovery service only
	@echo "üîç Starting discovery service..."
	@docker-compose -f deployment/docker-compose.services.yml up -d thoth-discovery
	@echo "Discovery service running (integrated with chat service)"

start-monitoring: ## Start monitoring stack only
	@echo "üìä Starting monitoring stack..."
	@docker-compose -f docker/monitoring/docker-compose.monitoring.yml --profile monitoring up -d
	@echo "Prometheus available at: http://localhost:9090"
	@echo "Grafana available at: http://localhost:3000 (admin/admin)"

start-vector-db: ## Start vector database only
	@echo "üóÑÔ∏è Starting vector database..."
	@docker-compose -f deployment/docker-compose.services.yml up -d chromadb
	@echo "ChromaDB available at: http://localhost:8003"

# ==============================================================================
# Scaling Commands
# ==============================================================================

scale-memory: ## Scale memory service replicas
	@read -p "Enter number of memory service replicas (current: 1): " replicas; \
	cd deployment/letta-memory-service && docker-compose up -d --scale letta=$$replicas
	@echo "Memory service scaled"

scale-chat: ## Scale chat service replicas
	@read -p "Enter number of chat service replicas (current: 1): " replicas; \
	docker-compose -f deployment/docker-compose.services.yml up -d --scale thoth-chat=$$replicas
	@echo "Chat service scaled"

# ==============================================================================
# Logging Commands
# ==============================================================================

logs-memory: ## View memory service logs
	@cd deployment/letta-memory-service && make logs

logs-chat: ## View chat service logs
	@docker-compose -f deployment/docker-compose.services.yml logs -f thoth-chat

logs-discovery: ## View discovery service logs
	@docker-compose -f deployment/docker-compose.services.yml logs -f thoth-discovery

logs-all: ## View all service logs
	@echo "üìã Showing logs from all services..."
	@docker-compose -f deployment/docker-compose.services.yml logs -f

# ==============================================================================
# Health and Monitoring
# ==============================================================================

health-check: ## Check health of all services
	@echo "üè• Checking health of all services..."
	@echo ""
	@echo "Memory Service (Letta):"
	@curl -s http://localhost:8283/health | jq '.' || echo "‚ùå Not responding"
	@echo ""
	@echo "Chat Service (Main API):"
	@curl -s http://localhost:8000/health | jq '.' || echo "‚ùå Not responding"
	@echo ""
	@echo "MCP Server:"
	@curl -s http://localhost:8001/health | jq '.' || echo "‚ùå Not responding"
	@echo ""
	@echo "Vector Database (ChromaDB):"
	@curl -s http://localhost:8003/api/v1/heartbeat | jq '.' || echo "‚ùå Not responding"
	@echo ""
	@echo "Monitoring (Prometheus):"
	@curl -s http://localhost:9090/-/healthy || echo "‚ùå Not responding"

view-metrics: ## View service metrics summary
	@echo "üìä Service Metrics Summary"
	@echo "=========================="
	@echo ""
	@echo "Memory Service Metrics:"
	@curl -s http://localhost:8283/api/memory/stats | jq '.' || echo "Not available"
	@echo ""
	@echo "Vector Database Metrics:"
	@curl -s http://localhost:8003/api/v1/collections | jq '.' || echo "Not available"

open-grafana: ## Open Grafana dashboard
	@echo "üìä Opening Grafana dashboard..."
	@which xdg-open > /dev/null && xdg-open http://localhost:3000 || \
	 which open > /dev/null && open http://localhost:3000 || \
	 echo "Open http://localhost:3000 in your browser (admin/admin)"

open-prometheus: ## Open Prometheus metrics
	@echo "üìà Opening Prometheus..."
	@which xdg-open > /dev/null && xdg-open http://localhost:9090 || \
	 which open > /dev/null && open http://localhost:9090 || \
	 echo "Open http://localhost:9090 in your browser"

# ==============================================================================
# Backup and Maintenance
# ==============================================================================

backup-memory: ## Backup memory service data
	@echo "üíæ Backing up memory service..."
	@cd deployment/letta-memory-service && make backup

backup-vector: ## Backup vector database
	@echo "üíæ Backing up vector database..."
	@mkdir -p ./backups
	@timestamp=$$(date +%Y%m%d_%H%M%S); \
	docker exec thoth-vector-db tar czf - /chroma/chroma > ./backups/chromadb_backup_$$timestamp.tar.gz
	@echo "Vector database backed up to: ./backups/chromadb_backup_$$timestamp.tar.gz"

backup-all: backup-memory backup-vector ## Backup all service data
	@echo "üíæ All backups completed"

clean-all: ## Clean all services and volumes (WARNING: deletes all data)
	@echo "‚ö†Ô∏è  This will delete ALL data from all services!"
	@read -p "Are you sure? Type 'DELETE' to confirm: " confirm; \
	if [ "$$confirm" = "DELETE" ]; then \
		echo "üßπ Cleaning all services..."; \
		docker-compose -f deployment/docker-compose.services.yml down -v; \
		cd deployment/letta-memory-service && make clean; \
		docker-compose -f docker/monitoring/docker-compose.monitoring.yml down -v; \
		docker system prune -f; \
		echo "‚úÖ All services and data cleaned"; \
	else \
		echo "‚ùå Cleanup cancelled"; \
	fi

# ==============================================================================
# Development Helpers
# ==============================================================================

dev-reset: ## Reset development environment
	@echo "üîÑ Resetting development environment..."
	@./scripts/stop-all-services.sh
	@docker volume prune -f
	@./scripts/start-all-services.sh dev
	@echo "‚úÖ Development environment reset"

dev-shell-memory: ## Open shell in memory service
	@docker exec -it thoth-memory-service /bin/bash

dev-shell-chat: ## Open shell in chat service
	@docker exec -it thoth-chat-service /bin/bash

dev-shell-discovery: ## Open shell in discovery service
	@docker exec -it thoth-discovery-service /bin/bash

# ==============================================================================
# Service Composition Commands
# ==============================================================================

start-core: start-memory start-vector-db ## Start core services (memory + vector DB)
	@echo "‚úÖ Core services started"

start-app: start-chat start-discovery ## Start application services
	@echo "‚úÖ Application services started"

start-full: start-core start-app start-monitoring ## Start full stack
	@echo "‚úÖ Full stack started"

# ==============================================================================
# Quick Development Commands
# ==============================================================================

dev: ## Quick development setup
	@echo "üõ†Ô∏è Starting development environment..."
	@./scripts/start-all-services.sh dev

prod: ## Quick production setup
	@echo "üè≠ Starting production environment..."
	@./scripts/start-all-services.sh prod

# ==============================================================================
# Service URLs (for reference)
# ==============================================================================

urls: ## Show all service URLs
	@echo "üåê Service URLs:"
	@echo "================"
	@echo "Main API:      http://localhost:8000"
	@echo "MCP Server:    http://localhost:8001"
	@echo "Memory Service: http://localhost:8283"
	@echo "Vector DB:     http://localhost:8003"
	@echo "Prometheus:    http://localhost:9090"
	@echo "Grafana:       http://localhost:3000 (admin/admin)"
	@echo "Load Balancer: http://localhost:80 (if enabled)"

# ==============================================================================
# Testing Commands
# ==============================================================================

test-integration: ## Test integration between all services
	@echo "üß™ Testing service integration..."
	@python scripts/test_memory_mcp_integration.py

test-memory: ## Test memory service specifically
	@echo "üß† Testing memory service..."
	@cd deployment/letta-memory-service && make test-memory

# Set default target
.DEFAULT_GOAL := help
