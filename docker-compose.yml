# ==============================================================================
# Thoth AI Research Assistant - Docker Compose Configuration
# Production-ready multi-service setup
# ==============================================================================

version: '3.8'

services:
  # ==============================================================================
  # Letta Memory Server
  # Advanced persistent memory system for research agents
  # Following Letta self-hosting best practices
  # ==============================================================================
  letta:
    image: letta/letta:latest
    container_name: thoth-letta
    environment:
      # Core Letta server configuration
      - LETTA_SERVER_HOST=0.0.0.0
      - LETTA_SERVER_PORT=8283
      - LETTA_PG_URI=postgresql://letta:letta_password@letta-postgres:5432/letta

      # PostgreSQL connection pool configuration
      - LETTA_PG_POOL_SIZE=20
      - LETTA_PG_MAX_OVERFLOW=30
      - LETTA_PG_POOL_TIMEOUT=30
      - LETTA_PG_POOL_RECYCLE=1800

      # Security and production settings
      - SECURE=true
      - LETTA_SERVER_PASSWORD=${LETTA_SERVER_PASSWORD:-letta_dev_password}

      # Tool execution environment
      - TOOL_EXEC_VENV_NAME=letta-tools

      # Optional E2B sandbox configuration (uncomment to enable)
      # - E2B_API_KEY=${E2B_API_KEY:-}
      # - E2B_SANDBOX_TEMPLATE_ID=${E2B_SANDBOX_TEMPLATE_ID:-}

      # API keys for LLM providers
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}

      # Optional local LLM provider URLs
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-}
      - VLLM_API_BASE=${VLLM_API_BASE:-}

      # Filesystem configuration for self-hosted deployment
      - LETTA_DATA_DIR=/letta/.persist
      - HOME=/letta
    volumes:
      - thoth-letta-data:/letta/.persist
      - thoth-letta-home:/letta
    command: ["letta", "server", "--host", "0.0.0.0", "--port", "8283"]
    ports:
      - "8283:8283"
    networks:
      - thoth-network
    depends_on:
      letta-postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8283/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ==============================================================================
  # PostgreSQL Database for Letta with pgvector extension
  # Stores Letta agent states and memory data with vector support
  # ==============================================================================
  letta-postgres:
    image: pgvector/pgvector:pg15
    container_name: thoth-letta-postgres
    environment:
      - POSTGRES_DB=letta
      - POSTGRES_USER=letta
      - POSTGRES_PASSWORD=letta_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - thoth-letta-postgres:/var/lib/postgresql/data
      # Initialize pgvector extension
      - ./docker/postgres/init-vector.sql:/docker-entrypoint-initdb.d/init-vector.sql:ro
    networks:
      - thoth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U letta -d letta"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # ==============================================================================
  # ChromaDB Vector Database
  # Persistent vector storage for RAG operations
  # ==============================================================================
  chromadb:
    image: chromadb/chroma:latest
    container_name: thoth-chromadb
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/data
    volumes:
      - thoth-chroma-data:/data
    ports:
      - "8003:8000"
    networks:
      - thoth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "grep -q ':1F40 ' /proc/net/tcp && echo ChromaDB healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # ==============================================================================
  # Thoth Main Application
  # Contains all core services: API server, MCP server, agent system
  # ==============================================================================
  thoth-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: thoth-app
    environment:
      # Database connections
      - THOTH_CHROMADB_HOST=chromadb
      - THOTH_CHROMADB_PORT=8003
      - THOTH_CHROMADB_URL=http://chromadb:8003

      # Server configuration
      - THOTH_API_HOST=0.0.0.0
      - THOTH_API_PORT=8000
      - THOTH_MCP_HOST=0.0.0.0
      - THOTH_MCP_PORT=8001

      # Directory paths (mounted volumes)
      - THOTH_WORKSPACE_DIR=/workspace
      - THOTH_PDF_DIR=/workspace/pdfs
      - THOTH_NOTES_DIR=/workspace/notes
      - THOTH_DATA_DIR=/workspace/data
      - THOTH_QUERIES_DIR=/workspace/queries
      - THOTH_DISCOVERY_SOURCES_DIR=/workspace/discovery
      - THOTH_KNOWLEDGE_BASE_DIR=/workspace/knowledge
      - THOTH_LOGS_DIR=/workspace/logs
      - THOTH_CACHE_DIR=/workspace/cache

      # Operational settings
      - THOTH_LOG_LEVEL=INFO
      - THOTH_DOCKER=1
      - PYTHONPATH=/app/src

      # Fix Letta filesystem permissions (thoth-app also imports letta)
      - LETTA_LOG_FILE=/workspace/logs/letta.log
      - HOME=/workspace

      # API Keys (loaded from environment or .env file)
      - API_MISTRAL_KEY=${API_MISTRAL_KEY:-}
      - API_OPENROUTER_KEY=${API_OPENROUTER_KEY:-}
      - API_OPENCITATIONS_KEY=${API_OPENCITATIONS_KEY:-}
      - API_GOOGLE_KEY=${API_GOOGLE_KEY:-}
      - API_SEMANTIC_SCHOLAR_KEY=${API_SEMANTIC_SCHOLAR_KEY:-}
      - API_WEB_SEARCH_KEY=${API_WEB_SEARCH_KEY:-}

      # Discovery settings
      - THOTH_DISCOVERY_AUTO_START_SCHEDULER=false
      - THOTH_DISCOVERY_DEFAULT_MAX_ARTICLES=50

      # Agent settings
      - THOTH_RESEARCH_AGENT_MEMORY_ENABLED=true
      - THOTH_AGENT_MAX_TOOL_CALLS=20
      - THOTH_AGENT_TIMEOUT_SECONDS=300

    volumes:
      # User's .thoth directory from their Obsidian vault (REQUIRED)
      # Set THOTH_DATA_MOUNT to point to your Obsidian vault's .thoth directory
      # Example: THOTH_DATA_MOUNT=/Users/john/Documents/MyVault/.thoth
      - ${THOTH_DATA_MOUNT:?Please set THOTH_DATA_MOUNT to your Obsidian vault .thoth directory}:/workspace

      # Temporary cache outside the main data volume
      - thoth-tmp-cache:/tmp/cache

      # Templates from repo for defaults (read-only)
      - ./templates:/app/templates:ro

      # Writable directory for Letta logs and configs (thoth-app imports letta)
      - thoth-app-home:/home/thoth

    ports:
      - "8080:8000"  # Main API server (remapped to avoid local dev conflicts)
      - "8081:8001"  # MCP server (remapped to avoid local dev conflicts)

    networks:
      - thoth-network

    depends_on:
      chromadb:
        condition: service_healthy

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

# ==============================================================================
# Persistent Volumes
# ==============================================================================
volumes:
  # Database volumes (Docker-managed for consistency and performance)
  thoth-letta-data:
    driver: local
    name: thoth-letta-data

  # PostgreSQL database for Letta
  thoth-letta-postgres:
    driver: local
    name: thoth-letta-postgres

  # Letta home directory (for logs and configs)
  thoth-letta-home:
    driver: local
    name: thoth-letta-home

  # Thoth-app home directory (for letta logs when imported by main app)
  thoth-app-home:
    driver: local
    name: thoth-app-home

  # ChromaDB vector database storage
  thoth-chroma-data:
    driver: local
    name: thoth-chroma-data

  # Temporary cache volume (not persisted with user data)
  thoth-tmp-cache:
    driver: local
    name: thoth-tmp-cache

  # NOTE: Main data directory is now a single bind mount to .thoth
  # User can override with THOTH_DATA_MOUNT environment variable

# ==============================================================================
# Networks
# ==============================================================================
networks:
  thoth-network:
    driver: bridge
    name: thoth-network
    ipam:
      config:
        - subnet: 172.20.0.0/16
