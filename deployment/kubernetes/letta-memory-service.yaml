# ==============================================================================
# Kubernetes Deployment for Letta Memory Service
# ==============================================================================
#
# This configuration deploys Letta as a separate, scalable memory service
# in Kubernetes with high availability and monitoring.
#
# Usage:
#   kubectl apply -f letta-memory-service.yaml
#   kubectl get pods -l app=letta-memory
#   kubectl logs -l app=letta-memory
#
# ==============================================================================
---
apiVersion: v1
kind: Namespace
metadata:
  name: thoth-memory
  labels:
    app.kubernetes.io/name: thoth-memory
    app.kubernetes.io/component: memory-service

---
# ConfigMap for Letta configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: letta-config
  namespace: thoth-memory
data:
  init-db.sql: |
    CREATE EXTENSION IF NOT EXISTS vector;
    CREATE SCHEMA IF NOT EXISTS thoth_memory;
    GRANT ALL PRIVILEGES ON SCHEMA thoth_memory TO letta_user;

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: letta-secrets
  namespace: thoth-memory
type: Opaque
stringData:
  postgres-password: "secure_memory_password_change_me"
  letta-server-password: "optional_server_password"
  openai-api-key: "your_openai_api_key_here"

---
# PostgreSQL StatefulSet with pgvector
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: letta-postgres
  namespace: thoth-memory
spec:
  serviceName: letta-postgres-headless
  replicas: 1  # Can be scaled to 2+ for high availability
  selector:
    matchLabels:
      app: letta-postgres
  template:
    metadata:
      labels:
        app: letta-postgres
    spec:
      containers:
      - name: postgres
        image: pgvector/pgvector:pg16
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "letta_memory_db"
        - name: POSTGRES_USER
          value: "letta_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: letta-secrets
              key: postgres-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - letta_user
            - -d
            - letta_memory_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - letta_user
            - -d
            - letta_memory_db
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: init-scripts
        configMap:
          name: letta-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi  # Adjust based on expected memory usage

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: letta-postgres
  namespace: thoth-memory
spec:
  selector:
    app: letta-postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# PostgreSQL Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: letta-postgres-headless
  namespace: thoth-memory
spec:
  selector:
    app: letta-postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None

---
# Redis Deployment for caching
apiVersion: apps/v1
kind: Deployment
metadata:
  name: letta-redis
  namespace: thoth-memory
spec:
  replicas: 1
  selector:
    matchLabels:
      app: letta-redis
  template:
    metadata:
      labels:
        app: letta-redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        args:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - 512mb
        - --maxmemory-policy
        - allkeys-lru
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        emptyDir: {}

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: letta-redis
  namespace: thoth-memory
spec:
  selector:
    app: letta-redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Letta Memory Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: letta-memory
  namespace: thoth-memory
  labels:
    app: letta-memory
    version: v1
spec:
  replicas: 2  # Can be scaled based on load
  selector:
    matchLabels:
      app: letta-memory
  template:
    metadata:
      labels:
        app: letta-memory
        version: v1
    spec:
      containers:
      - name: letta
        image: letta/letta:latest
        ports:
        - containerPort: 8283
        env:
        # Database configuration
        - name: LETTA_PG_URI
          value: "postgresql://letta_user:$(POSTGRES_PASSWORD)@letta-postgres:5432/letta_memory_db"
        - name: LETTA_PG_SCHEMA
          value: "thoth_memory"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: letta-secrets
              key: postgres-password

        # Server configuration
        - name: LETTA_SERVER_HOST
          value: "0.0.0.0"
        - name: LETTA_SERVER_PORT
          value: "8283"
        - name: LETTA_SERVER_PASS
          valueFrom:
            secretKeyRef:
              name: letta-secrets
              key: letta-server-password

        # Security
        - name: SECURE
          value: "true"
        - name: CORS_ORIGINS
          value: "https://thoth.yourdomain.com,http://localhost:3000"

        # API Keys
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: letta-secrets
              key: openai-api-key

        # Performance
        - name: LETTA_POOL_SIZE
          value: "50"
        - name: LETTA_PG_POOL_SIZE
          value: "20"
        - name: LETTA_PG_MAX_OVERFLOW
          value: "40"

        # Redis caching
        - name: REDIS_URL
          value: "redis://letta-redis:6379/0"
        - name: LETTA_CACHE_TTL
          value: "3600"

        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"

        livenessProbe:
          httpGet:
            path: /health
            port: 8283
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health
            port: 8283
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        volumeMounts:
        - name: letta-storage
          mountPath: /root/.letta

      volumes:
      - name: letta-storage
        emptyDir: {}

---
# Letta Memory Service
apiVersion: v1
kind: Service
metadata:
  name: letta-memory-service
  namespace: thoth-memory
  labels:
    app: letta-memory
spec:
  selector:
    app: letta-memory
  ports:
  - name: http
    port: 8283
    targetPort: 8283
  type: ClusterIP

---
# Ingress for external access (optional)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: letta-memory-ingress
  namespace: thoth-memory
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "120"
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - memory.yourdomain.com
    secretName: letta-memory-tls
  rules:
  - host: memory.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: letta-memory-service
            port:
              number: 8283

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: letta-memory-hpa
  namespace: thoth-memory
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: letta-memory
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# ServiceMonitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: letta-memory-monitor
  namespace: thoth-memory
spec:
  selector:
    matchLabels:
      app: letta-memory
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
