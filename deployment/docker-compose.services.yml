# ==============================================================================
# Thoth Complete Services Stack
# All services configured for independent deployment and scaling
# ==============================================================================

version: '3.8'

services:
  # ==============================================================================
  # Memory Service (Letta) - Completely Separate
  # ==============================================================================
  letta-postgres:
    image: pgvector/pgvector:pg16
    container_name: thoth-memory-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: letta_memory_db
      POSTGRES_USER: letta_user
      POSTGRES_PASSWORD: ${LETTA_DB_PASSWORD:-secure_memory_password}
    volumes:
      - thoth-memory-postgres-data:/var/lib/postgresql/data
    networks:
      - thoth-memory-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U letta_user -d letta_memory_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  letta-redis:
    image: redis:7-alpine
    container_name: thoth-memory-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - thoth-memory-redis-data:/data
    networks:
      - thoth-memory-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  letta-memory:
    image: letta/letta:latest
    container_name: thoth-memory-service
    restart: unless-stopped
    depends_on:
      letta-postgres:
        condition: service_healthy
      letta-redis:
        condition: service_healthy
    environment:
      # Database
      LETTA_PG_URI: postgresql://letta_user:${LETTA_DB_PASSWORD:-secure_memory_password}@letta-postgres:5432/letta_memory_db
      LETTA_PG_SCHEMA: thoth_memory

      # Server
      LETTA_SERVER_HOST: 0.0.0.0
      LETTA_SERVER_PORT: 8283

      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}

      # Performance
      LETTA_POOL_SIZE: 50
      LETTA_PG_POOL_SIZE: 20

      # Redis
      REDIS_URL: redis://letta-redis:6379/0

    ports:
      - "8283:8283"
    volumes:
      - thoth-memory-server-data:/root/.letta
    networks:
      - thoth-memory-network
      - thoth-main-network  # Connect to main app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8283/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # ==============================================================================
  # Discovery Service - Can be separated
  # ==============================================================================
  thoth-discovery:
    build:
      context: ..
      dockerfile: Dockerfile
      target: runtime
    container_name: thoth-discovery-service
    restart: unless-stopped
    environment:
      # Service configuration
      THOTH_SERVICE_MODE: discovery
      THOTH_DISCOVERY_AUTO_START_SCHEDULER: "true"
      THOTH_DISCOVERY_DEFAULT_MAX_ARTICLES: 50

      # Directory paths
      THOTH_WORKSPACE_DIR: /workspace
      THOTH_DISCOVERY_SOURCES_DIR: /workspace/discovery/sources
      THOTH_DISCOVERY_RESULTS_DIR: /workspace/discovery/results

      # API Keys
      API_MISTRAL_KEY: ${API_MISTRAL_KEY:-}
      API_OPENROUTER_KEY: ${API_OPENROUTER_KEY:-}

      # Memory service connection
      LETTA_SERVER_URL: http://letta-memory:8283

    volumes:
      - thoth-discovery-data:/workspace/discovery
      - thoth-shared-data:/workspace/data
    networks:
      - thoth-main-network
      - thoth-memory-network
    command: ["python", "-m", "thoth", "discovery", "server"]
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ==============================================================================
  # Chat Agent Service - API + MCP Server
  # ==============================================================================
  thoth-chat:
    build:
      context: ..
      dockerfile: Dockerfile
      target: runtime
    container_name: thoth-chat-service
    restart: unless-stopped
    environment:
      # Server configuration
      THOTH_API_HOST: 0.0.0.0
      THOTH_API_PORT: 8000
      THOTH_MCP_HOST: 0.0.0.0
      THOTH_MCP_PORT: 8001

      # Agent configuration
      THOTH_RESEARCH_AGENT_MEMORY_ENABLED: "true"
      THOTH_AGENT_MAX_TOOL_CALLS: 20

      # Directory paths
      THOTH_WORKSPACE_DIR: /workspace
      THOTH_NOTES_DIR: /workspace/notes
      THOTH_QUERIES_DIR: /workspace/queries

      # External service connections
      THOTH_CHROMADB_URL: http://chromadb:8003
      LETTA_SERVER_URL: http://letta-memory:8283

      # API Keys
      API_MISTRAL_KEY: ${API_MISTRAL_KEY:-}
      API_OPENROUTER_KEY: ${API_OPENROUTER_KEY:-}
      API_OPENCITATIONS_KEY: ${API_OPENCITATIONS_KEY:-}

    ports:
      - "8000:8000"  # Main API
      - "8001:8001"  # MCP Server
    volumes:
      - thoth-chat-data:/workspace/notes
      - thoth-shared-data:/workspace/data
      - thoth-queries-data:/workspace/queries
    networks:
      - thoth-main-network
      - thoth-memory-network
    depends_on:
      chromadb:
        condition: service_healthy
      letta-memory:
        condition: service_healthy
    command: ["python", "-m", "thoth", "server", "start"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'

  # ==============================================================================
  # Vector Database (ChromaDB) - Separate for RAG
  # ==============================================================================
  chromadb:
    image: chromadb/chroma:latest
    container_name: thoth-vector-db
    restart: unless-stopped
    environment:
      CHROMA_SERVER_HOST: 0.0.0.0
      CHROMA_SERVER_HTTP_PORT: 8003
      IS_PERSISTENT: "TRUE"
      PERSIST_DIRECTORY: /chroma/chroma
    volumes:
      - thoth-vector-data:/chroma/chroma
    ports:
      - "8003:8003"
    networks:
      - thoth-main-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # ==============================================================================
  # Monitoring Stack - Prometheus & Grafana
  # ==============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: thoth-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ../docker/monitoring/prometheus:/etc/prometheus:ro
      - thoth-prometheus-data:/prometheus
    networks:
      - thoth-monitoring-network
      - thoth-main-network
      - thoth-memory-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  grafana:
    image: grafana/grafana:latest
    container_name: thoth-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - thoth-grafana-data:/var/lib/grafana
      - ../docker/monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - thoth-monitoring-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ==============================================================================
  # Load Balancer (Optional) - Nginx for high availability
  # ==============================================================================
  nginx:
    image: nginx:alpine
    container_name: thoth-load-balancer
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../docker/nginx/ssl:/etc/ssl:ro
    networks:
      - thoth-main-network
    depends_on:
      - thoth-chat
    profiles:
      - loadbalancer
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

# ==============================================================================
# Volumes - Persistent Storage
# ==============================================================================
volumes:
  # Memory service volumes
  thoth-memory-postgres-data:
    driver: local
    name: thoth-memory-postgres-data
  thoth-memory-redis-data:
    driver: local
    name: thoth-memory-redis-data
  thoth-memory-server-data:
    driver: local
    name: thoth-memory-server-data

  # Main application volumes
  thoth-vector-data:
    driver: local
    name: thoth-vector-data
  thoth-chat-data:
    driver: local
    name: thoth-chat-data
  thoth-discovery-data:
    driver: local
    name: thoth-discovery-data
  thoth-queries-data:
    driver: local
    name: thoth-queries-data
  thoth-shared-data:
    driver: local
    name: thoth-shared-data

  # Monitoring volumes
  thoth-prometheus-data:
    driver: local
    name: thoth-prometheus-data
  thoth-grafana-data:
    driver: local
    name: thoth-grafana-data

# ==============================================================================
# Networks - Service Communication
# ==============================================================================
networks:
  # Main application network
  thoth-main-network:
    driver: bridge
    name: thoth-main-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

  # Memory service network (isolated)
  thoth-memory-network:
    driver: bridge
    name: thoth-memory-network
    ipam:
      config:
        - subnet: 172.21.0.0/16

  # Monitoring network
  thoth-monitoring-network:
    driver: bridge
    name: thoth-monitoring-network
    ipam:
      config:
        - subnet: 172.22.0.0/16
