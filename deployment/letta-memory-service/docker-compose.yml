# ==============================================================================
# Letta Memory Service - Standalone Deployment
# ==============================================================================
#
# This deployment runs Letta as a separate memory service that can be scaled
# independently from the main Thoth application.
#
# Usage:
#   docker-compose up -d          # Start memory service
#   docker-compose logs letta     # View logs
#   docker-compose down           # Stop service
#
# ==============================================================================

version: '3.8'

services:
  # PostgreSQL with pgvector for production memory storage
  postgres:
    image: pgvector/pgvector:pg16
    container_name: letta-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: letta_memory_db
      POSTGRES_USER: letta_user
      POSTGRES_PASSWORD: ${LETTA_DB_PASSWORD:-secure_memory_password}
      POSTGRES_HOST_AUTH_METHOD: trust  # For development only
    volumes:
      - letta_postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${LETTA_DB_PORT:-5433}:5432"  # Use different port to avoid conflicts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U letta_user -d letta_memory_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - letta-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: letta-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - letta_redis_data:/data
    ports:
      - "${LETTA_REDIS_PORT:-6380}:6379"  # Use different port to avoid conflicts
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - letta-network

  # Letta Memory Server
  letta:
    image: letta/letta:latest
    container_name: letta-memory-server
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database configuration
      LETTA_PG_URI: postgresql://letta_user:${LETTA_DB_PASSWORD:-secure_memory_password}@postgres:5432/letta_memory_db
      LETTA_PG_SCHEMA: thoth_memory

            # Server configuration
      LETTA_SERVER_HOST: 0.0.0.0
      LETTA_SERVER_PORT: 8283
      LETTA_SERVER_PASS: ${LETTA_SERVER_PASSWORD:-}

      # Security (disable for development, enable for production)
      SECURE: ${LETTA_SECURE_MODE:-false}
      CORS_ORIGINS: ${LETTA_CORS_ORIGINS:-http://localhost:3000,http://localhost:8000}

      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}

      # Performance tuning
      LETTA_POOL_SIZE: ${LETTA_POOL_SIZE:-50}
      LETTA_PG_POOL_SIZE: ${LETTA_PG_POOL_SIZE:-20}
      LETTA_PG_MAX_OVERFLOW: ${LETTA_PG_MAX_OVERFLOW:-40}

      # Redis caching
      REDIS_URL: redis://redis:6379/0
      LETTA_CACHE_TTL: ${LETTA_CACHE_TTL:-3600}

      # Logging
      LOG_LEVEL: ${LETTA_LOG_LEVEL:-INFO}

    ports:
      - "${LETTA_PORT:-8283}:8283"
    volumes:
      - letta_server_data:/root/.letta
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8283/v1/health/"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - letta-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Optional: Nginx reverse proxy for load balancing
  nginx:
    image: nginx:alpine
    container_name: letta-nginx
    restart: unless-stopped
    depends_on:
      - letta
    ports:
      - "${LETTA_PROXY_PORT:-8284}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - letta-network
    profiles:
      - proxy  # Optional service, start with: docker-compose --profile proxy up

  # Optional: Monitoring with Prometheus metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: letta-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - letta-network
    profiles:
      - monitoring  # Optional service

volumes:
  letta_postgres_data:
    driver: local
  letta_redis_data:
    driver: local
  letta_server_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  letta-network:
    driver: bridge
    name: letta-memory-network
